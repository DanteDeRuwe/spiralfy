@attribute [PiralExtension("homepage")]
@using System.Timers
@inject NavigationManager _navManager

@if (_token is null)
{
    <div class="container" style="margin-top: 10rem;">
        <small>
            Please log in.
        </small>
    </div>
    return;
}

@if(_activeDevice is null)
{
    <div class="container" style="margin-top: 10rem;">
        <small>
            This player requires an active Spotify device (for now).
            You should try to play something on one of your Spotify devices!
        </small>
    </div>
    return;
}

<div class="container" style="width: 25rem; margin-top: 10rem;">
    @switch (_currentlyPlaying)
    {
        case FullTrack track:
            <img class="card-img-top" style="object-fit: cover" src="@track.Album.Images.First().Url" alt="">
            <div class="card-body">
                <div>
                    <h4 class="card-title">@track.Name</h4>
                    <p>@track.Album.Name</p>
                    <small>@string.Join(", ", track.Artists.Select(a => a.Name))</small>
                </div>
            </div>
            break;
        case FullEpisode episode:
            <img class="card-img-top" src="@episode.Images.First().Url" alt="" width="200" height="200">
            <div class="card-body">
                <div>
                    <h4>@episode.Name</h4>
                    <small>@episode.Description</small>
                </div>
            </div>
            break;
    }
    <div class="d-flex justify-content-around mb-2">
        <button @onclick="Previous" class="Button px-4">
            <img src="https://api.iconify.design/fa-solid:step-backward.svg?height=16&color=%23ffffff"/>
        </button>
        <button @onclick="PlayPause" class="Button px-4" data-primary="true">
            <img src="https://api.iconify.design/fa-solid:@(_playing ? "pause" : "play").svg?height=16&color=%23ffffff"/>
        </button>
        <button @onclick="Next" class="Button px-4">
            <img src="https://api.iconify.design/fa-solid:step-forward.svg?height=16&color=%23ffffff"/>
        </button>
        <button @onclick="PlaySurprise" class="Button px-4">
            <img src="https://api.iconify.design/ph:circle-wavy-question-light.svg?height=16&color=%23ffffff"/>
        </button>
    </div>
</div>


@code {
    bool _playing;
    private IPlayableItem _currentlyPlaying;
    private IPlayableItem _surpriseTrack;
    private Device _activeDevice;
    private readonly Timer _timer = new() { Interval = 3000 };
    private string _token;
    private ISpiralfyPlayer _player;
    private ISpiralfyService _service;

    protected override async Task OnInitializedAsync()
    {
        _token = new Uri(_navManager.Uri).ExtractAccessToken();
        if (_token is null) return;
        
        var spotify = new SpotifyClient(_token);
        _player = new SpiralfyPlayer(spotify);
        _service = new SpiralfyService(spotify);

        _surpriseTrack = await _service.GetTrack("4cOdK2wGLETKBW3PvgPWqT");

        _currentlyPlaying = await _player.GetCurrentlyPlaying();
        _playing = await _player.IsPlaying();

        await PollApi();
        SetPollingTimer();
    }

    private void SetPollingTimer()
    {
        _timer.Elapsed += async (_, _) =>
        {
            await PollApi();
            await InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }

    private async Task PollApi()
    {
        _currentlyPlaying = await _player.GetCurrentlyPlaying();
        await InvokeAsync(StateHasChanged);
        _playing = await _player.IsPlaying();
        await InvokeAsync(StateHasChanged);
        _activeDevice = await _service.GetActiveDevice();
    }

    async Task PlaySurprise()
    {
        await _player.Play(_surpriseTrack);
        _playing = true;
    }

    async Task PlayPause()
    {
        _playing = await _player.PlayPause();
    }

    async Task Next()
    {
        await _player.Next();
        await PollApi();
    }
    
    async Task Previous()
    {
        await _player.Previous();
        await PollApi();
    }
}
