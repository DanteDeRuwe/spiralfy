@page "/"
@using System.Timers
@inject NavigationManager _navManager

@if (!_loggedIn)
{
    <div class="container">
        <small>Please log in.</small>
    </div>
    return;
}

<div class="container d-flex flex-column align-items-center" style="width: 25rem; gap:3rem;">

    <PlaylistsRandomizer Player="@_player" Service="@_service" @ref="_playlistsRandomizer"/>
    
    <PlayableItemView Item="@_currentlyPlaying"/>

    <div class="d-flex justify-content-between w-100 my-2">
        <button @onclick="Previous" class="Button px-4">
            <img src="https://api.iconify.design/fa-solid:step-backward.svg?height=16&color=%23ffffff" alt="previous"/>
        </button>
        <button @onclick="PlayPause" class="Button px-4" data-primary="true">
            <img src="https://api.iconify.design/fa-solid:@(_playing ? "pause" : "play").svg?height=16&color=%23ffffff" alt="play or pause"/>
        </button>
        <button @onclick="Next" class="Button px-4">
            <img src="https://api.iconify.design/fa-solid:step-forward.svg?height=16&color=%23ffffff" alt="next"/>
        </button>
        <button @onclick="PlaySurprise" class="Button px-4">
            <img src="https://api.iconify.design/ph:circle-wavy-question-light.svg?height=16&color=%23ffffff" alt="play a surprise"/>
        </button>
    </div>
</div>

@code {
    bool _playing;
    private IPlayableItem _currentlyPlaying;
    private IPlayableItem _surpriseTrack;
    private Device _activeDevice;
    private readonly Timer _timer = new() { Interval = 3000 };
    private string _token;
    private ISpiralfyPlayer _player;
    private ISpiralfyService _service;
    private bool _loggedIn;

    private PlaylistsRandomizer _playlistsRandomizer;

    protected override async Task OnInitializedAsync()
    {
        _token = new Uri(_navManager.Uri).ExtractAccessToken();
        if (_token is null)
        {
            return;
        }

        var spotify = new SpotifyClient(_token);
        _player = new SpiralfyPlayer(spotify);
        _service = new SpiralfyService(spotify);

        _loggedIn = (await _service.GetCurrentUser()) is not null;
        if (!_loggedIn)
        {
            return;
        }

        _surpriseTrack = await _service.GetTrack("4cOdK2wGLETKBW3PvgPWqT");

        await PollApi();
        SetPollingTimer();
    }

    private void SetPollingTimer()
    {
        _timer.Elapsed += async (_, _) =>
        {
            await PollApi();
            await InvokeAsync(StateHasChanged);
        };
        _timer.Start();
    }

    private async Task PollApi()
    {
        _currentlyPlaying = await _player.GetCurrentlyPlaying();
        StateHasChanged();
        _playing = await _player.IsPlaying();
        StateHasChanged();
        _activeDevice = await _service.GetActiveDevice();
        StateHasChanged();
        await _playlistsRandomizer.Update();
    }

    async Task PlaySurprise()
    {
        await _player.Play(_surpriseTrack);
        _playing = true;
    }

    async Task PlayPause()
    {
        _playing = await _player.PlayPause();
    }

    async Task Next()
    {
        await _player.Next();
        await PollApi();
    }

    async Task Previous()
    {
        await _player.Previous();
        await PollApi();
    }

}
